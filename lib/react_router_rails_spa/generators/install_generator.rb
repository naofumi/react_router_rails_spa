require "rails/generators"

module ReactRouterRailsSpa
  module Generators
    class InstallGenerator < Rails::Generators::Base
      source_root File.expand_path("templates", __dir__)

      def create_react_router_app
        say "Downloading React Router v7 ..."
        inside Rails.root do
          run "npx create-react-router@latest frontend --yes --no-git-init"
        end
      end

      def setup_rails_routes
        say "Setting up Rails routes ..."
        route <<~RUBY
          # When we use React Router inside a subdirectory, it works better if we
          # use a trailing slash for the root path.
          # This redirects from "/react-router" to "/react-router/".
          get "react", to: redirect("/react/"), constraints: ->(req) {
              req.original_url.last != "/"
            }

          # All requests to `/react/*` are handled by ReactController#show.
          match "react", to: "react#show", via: :all
          get "react/*path", to: "react#show"
        RUBY
      end

      def create_react_controller
        say "Creating the React bootstrap endpoint controller ..."
        create_file "app/controllers/react_controller.rb", <<~RUBY
          # This controller provides the catch-all action for React Router.
          # This will render the bootstrap HTML file
          # for all React Router requests.
          #
          # Unlike typical webpack or esbuild setups, we do not generate the bootstrap HTML file from ERB templates which include
          # `javascript_include_tag` (propshaft, sprockets) or `javascript_pack_tag` (webpack).
          # Instead, we take the index.html file that was generated by the React Router build
          # and rename it to "react-router-rails-spa-index.html".
          # We then serve this from the controller action in response to the bootstrap HTML file request.
          #
          # Benefits:
          #
          # * We can use the index.html file that React Router generates using SSG,
          #   from the `frontend/app/root.tsx` file.
          #   This file contains optimizations that would be challenging to recreate inside Rails using ERB templates.
          # * By going through the Rails controller, we can adjust the cache and cookie headers to
          #   improve performance, reliability, and integration with Rails.
          #
          # The included ReactRouterRailsSpa::CsrfCookieEnabled module will 
          # send the CSRF token inside the "X-CSRF-Token" cookie for use inside your React app.
          class ReactController < ApplicationController
            include ReactRouterRailsSpa::CsrfCookieEnabled

            def show
              render file: Rails.public_path.join("react/react-router-rails-spa-index.html"), layout: false
            end
          end
        RUBY
      end

      def copy_rake_task
        say "Copying Rake tasks ..."
        template "react.rake", "lib/tasks/react.rake"
      end

      def copy_react_router_configs
        say "Copying React Router configurations ..."
        template "react-router.config.ts", "frontend/react-router.config.ts"
        template "vite.config.ts", "frontend/vite.config.ts"
      end

      def copy_react_app_files
        say "Copying React Router application pages and utilities ..."
        template "home.tsx", "frontend/app/routes/home.tsx"
        directory "welcome", "frontend/app/welcome"
        template "csrf.ts", "frontend/app/utilities/csrf.ts"
        template "proxy.ts", "frontend/app/utilities/proxy.ts"
      end
    end
  end
end
